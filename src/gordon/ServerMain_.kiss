(loadFrom "kiss-express" "src/ServerUtil.kiss")

(import datetime.DateTime)
(import uuid.Uuid)

(defMacro scriptContent []
    (File.getContent "bin/frontend.js"))

(userProp :Array<ClockEntry> clockEntries [])
(userProp :Array<ClockAdjustment> clockAdjustments [])

(userProp :Map<String,String> projects (new Map))
(userProp :Map<String,Bool> hiddenProjects (new Map))

(userProp :Null<ClockEntry> currentClockEntry null)
(userProp :Null<Int> selectedWeek null)

// TODO store this info incrementally instead of reconstructing it every reload
// Calculate the total hours per project per week over time
(function :Map<String,Array<Float>> totalTimes [req]
    (if !req.user
            (new Map)
        (let [projects (get_user_projects req)
                clockEntries (get_user_clockEntries req)
                &mut currentClockEntry (get_user_currentClockEntry req)
                clockAdjustments (get_user_clockAdjustments req)
                :Map<String,kiss.List<Float>> m (new Map)
                &mut lastWeek null
                // Add a fake entry with today's date, which will force new weeks to appear in the data
                &mut :ClockEntry fakeEntry null]
            (doFor =>projectId _ projects
                (unless fakeEntry
                    (let [now (.getTime (DateTime.now))]
                        (set fakeEntry (objectWith [inTime now outTime now] projectId))
                        (unless currentClockEntry
                            (set currentClockEntry fakeEntry))))
                (dictSet m projectId []))
            (unless clockEntries (return (for =>id name projects =>id [0.0])))
            (doFor entry (clockEntries.concat [currentClockEntry fakeEntry])
                (let [inTime (DateTime.fromTime entry.inTime)
                        // Account for the currently running clock entry:
                        _outTime (or entry.outTime (.getTime (DateTime.now)))
                        outTime (DateTime.fromTime _outTime)
                        &mut week (inTime.getWeek)]
                    (unless (= lastWeek week)
                        // This only should happen when rolling over to a new year:
                        (when (= lastWeek null) (set lastWeek (- week 1)))
                        (when (< week lastWeek)
                            (+= week 52))
                        (doFor _ (range (- week lastWeek))
                            (doFor =>projectId _ projects
                                (.push (dictGet m projectId) 0))))
                    (set lastWeek week)
                    (+= (nth (dictGet m entry.projectId) -1) (/ (.getTotalSeconds #{outTime - inTime;}#) 3600))))
            (doFor adj clockAdjustments
                (+= (nth (dictGet m adj.projectId) adj.week) adj.delta))
            m)))

(userProp :Map<String,Array<Float>> projectWeeklyTargets (new Map))
(userProp :Map<String,Float> projectRepeatingTargets (new Map))

// This should always be called with weeks in ascending order because of how the HTML is constructed in a loop
(function :Float getProjectTarget [uuid week req]
    (withUserProp projectWeeklyTargets req
        (withUserProp projectRepeatingTargets req
            (unless (projectWeeklyTargets.exists uuid)
                (dictSet projectWeeklyTargets uuid []))
            (while (<= .length (dictGet projectWeeklyTargets uuid) week)
                (.push (dictGet projectWeeklyTargets uuid)
                    (ifLet [repeatingTarget (dictGet projectRepeatingTargets uuid)]
                            repeatingTarget
                        0)))
            (nth (dictGet projectWeeklyTargets uuid) week))))

// Clock out on logout:
(onLogout req
    (withUserProp currentClockEntry req
        (when currentClockEntry
            // Clock out the current entry
            (set currentClockEntry.outTime (.getTime (DateTime.now)))
            (withUserProp clockEntries req
                (clockEntries.push currentClockEntry))
            (set currentClockEntry null))))

(kissExpress app [3000 3001 3002]
    (app.get "/"
        (req_res_next []
            (let [&mut dynamicHtml ""
                    tt (totalTimes req)
                    currentClockEntry (get_user_currentClockEntry req)]
                (cond
                    (req.user
                        (localVar &mut isFirst true)
                        (+= dynamicHtml "<style>td { border: 1px solid black; } th { border: 2px solid black;  }</style>")
                        (doFor =>uuid name (get_user_projects req)
                            (let [projectWeekHours (dictGet tt uuid)
                                    projectWeekHoursShort (for hours projectWeekHours (/ (Std.int (* 1000 hours)) 1000)) ]
                                (when isFirst
                                    (+= dynamicHtml "<table><tr><th></th><th>Project</th>")
                                    (doFor num (reverse (collect (range projectWeekHours.length)))
                                        (+= dynamicHtml "<th")
                                        (when (= (get_user_selectedWeek req) num)
                                            (+= dynamicHtml " style=\"background-color: lime;\""))
                                        (+= dynamicHtml "><a href=\"/select_week/${num}\">Week $(+ num 1)</a></th>"))
                                    (+= dynamicHtml "</tr>")
                                    (set isFirst false))
                                
                                // This has to happen after the isFirst logic, or the table header row could be missing
                                (withUserProp hiddenProjects req
                                    (when (hiddenProjects.exists uuid)
                                        (continue)))

                                (+= dynamicHtml "<tr>")
                                (if (= uuid currentClockEntry?.projectId)
                                        // Show when clocked in:
                                        // TODO color it to warn of crunch
                                        (+= dynamicHtml "<td><strong id=\"timestamp\">Since $(DateTime.fromTime currentClockEntry.inTime)</strong></td>")
                                    // Hide button:
                                    (+= dynamicHtml "<td><a href=\"#\" onclick=\"window.location.href = '/hide_project/${uuid}';\">Hide</a></td>"))
                                (+= dynamicHtml
                                    "<td><a href=\"#\" onclick=\"window.location.href = '/clock_entry/${uuid}';\">${name}</a></td>")
                                (doFor [week hours] (reverse (enumerate projectWeekHoursShort))
                                    (localVar target (getProjectTarget uuid week req))
                                    (+= dynamicHtml "<td")
                                    // Mark the current running clock to update in real-time
                                    (when (and (= uuid currentClockEntry?.projectId)
                                                (= week (- projectWeekHoursShort.length 1)))
                                        (+= dynamicHtml " id=\"runningClock\""))
                                    (cond
                                        ((= (get_user_selectedWeek req) week)
                                            (+= dynamicHtml " style=\"background-color: lime;\""))
                                        ((< 0 target)
                                            (let [percent (/ hours target)
                                                    color (cond
                                                                ((<= 0 percent 0.25) "red")
                                                                ((<= 0.25 percent 0.5) "tomato")
                                                                ((<= 0.5 percent 0.75) "orange")
                                                                ((<= 0.75 percent 1) "yellow")
                                                                ((<= 1 percent 1.25) "lime")
                                                                ((<= 1.25 percent 1.5) "yellow")
                                                                ((<= 1.5 percent 1.75) "orange")
                                                                ((<= 1.75 percent 2) "tomato")
                                                                ((<= 2 percent) "red")
                                                                (true "white"))]
                                                (+= dynamicHtml " style=\"background-color: ${color};\""))))
                                    (+= dynamicHtml ">${hours}")
                                    (when (< 0 target)
                                        (+= dynamicHtml " / ${target}"))
                                    (+= dynamicHtml "</td>"))
                                (doFor delta [-8 -4 -2 -1 1 2 4 8]
                                    (+= dynamicHtml "<td><a href=\"/adjust_project/${uuid}/${delta}\">")
                                    (+= dynamicHtml
                                        (if (> 0 delta) 
                                                "$delta"
                                            "+$delta"))
                                    (+= dynamicHtml "</a></td>"))
                                (let [setTargetText (if (get_user_selectedWeek req) "Set week target" "Set repeating target")]
                                    (+= dynamicHtml "<td><input id=\"targetBox${uuid}\"></input>")
                                    (+= dynamicHtml "<a href=\"#\" onclick=\"window.location.href = '/set_target/${uuid}/' + document.getElementById('targetBox${uuid}').value;\">${setTargetText}</a></td>"))
                                (+= dynamicHtml "</tr>")))
                        (+= dynamicHtml "</table>"))
                    (true
                        (+= dynamicHtml "Log in or sign up first!")))
                (res.send "<head><title>${pageName}</title><script>$(scriptContent)</script></head> $(kissExpressHeader req)
                            ${dynamicHtml}
                            <input id=\"projectName\"></input><a href=\"#\" onclick=\"window.location.href = '/new_project/' + document.getElementById('projectName').value;\">new project</a><br />
                            <a href=\"#\" onclick=\"window.location.href = '/reveal_projects';\">Reveal all projects</a>
                            "))))
    
    (app.param "project_name"
        (req_res_next [project_name]
            (set req.project_name project_name)
            (next)))

    // forgot to fill text box
    (app.get "/new_project/"
        (req_res_next []
            (res.redirect "/")))

    (app.get "/new_project/:project_name"
        (req_res_next []
            (when (StringTools.trim req.project_name)
                (let [projectName req.project_name]
                    (withUserProp projects req
                        (dictSet projects (Uuid.v4) projectName))))
            (res.redirect "/")))

    (app.param "project_id"
        (req_res_next [project_id]
            (set req.project_id project_id)
            (next)))
    
    (app.get "/clock_entry/:project_id"
        (req_res_next []
            (withUserProp currentClockEntry req
                (let [projectId req.project_id
                        currentProjectId currentClockEntry?.projectId]
                    (when currentClockEntry
                        // Clock out the current entry
                        (set currentClockEntry.outTime (.getTime (DateTime.now)))
                        (withUserProp clockEntries req
                            (clockEntries.push currentClockEntry))
                        (set currentClockEntry null))
                    (unless (= projectId currentProjectId)
                        (set currentClockEntry
                            (objectWith [inTime (.getTime (DateTime.now))] projectId)))
                    (res.redirect "/")))))

    (app.get "/hide_project/:project_id"
        (req_res_next []
            (withUserProp hiddenProjects req
                (let [projectId req.project_id]
                    (dictSet hiddenProjects projectId true)
                    (res.redirect "/")))))
    
    (app.get "/reveal_projects"
        (req_res_next []
            (withUserProp hiddenProjects req
                (hiddenProjects.clear)
                (res.redirect "/"))))
    
    (app.param "week"
        (req_res_next [week]
            (set req.week week)
            (next)))
    
    (app.get "/select_week/:week"
        (req_res_next []
            (withUserProp selectedWeek req
                (if (= selectedWeek req.week)
                        (set selectedWeek null)
                    (set selectedWeek req.week))
                (res.redirect "/"))))
    
    (app.param "delta"
        (req_res_next [delta]
            (set req.delta delta)
            (next)))
    
    (app.get "/adjust_project/:project_id/:delta"
        (req_res_next []
            (whenLet [week (get_user_selectedWeek req)]
                (withUserProp clockAdjustments req
                    (clockAdjustments.push
                        (object
                            projectId req.project_id
                            delta req.delta
                            week week))))
            (res.redirect "/")))
    
    (app.param "amount"
        (req_res_next [amount]
            (set req.amount amount)
            (next)))

    (app.get "/set_target/:project_id/:amount"
        (req_res_next []
            (unless (Math.isNaN (Std.parseFloat req.amount))
                (withUserProp projectWeeklyTargets req
                    (withUserProp projectRepeatingTargets req
                        (localVar selectedWeek (get_user_selectedWeek req))
                        (let [_selectedWeek (or selectedWeek (- .length (dictGet projectWeeklyTargets req.project_id) 1))]
                            (setNth (dictGet projectWeeklyTargets req.project_id) _selectedWeek (Std.parseFloat req.amount)))
                        (unless selectedWeek
                            (dictSet projectRepeatingTargets req.project_id (Std.parseFloat req.amount))))))
            (res.redirect "/"))))