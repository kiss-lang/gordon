(loadFrom "kiss-express" "src/ServerUtil.kiss")

(import datetime.DateTime)
(import uuid.Uuid)

(defMacro scriptContent []
    (File.getContent "bin/frontend.js"))

(userProp :Array<ClockEntry> clockEntries [])

(userProp :Map<String,String> projects (new Map))

(userProp :Null<ClockEntry> currentClockEntry null)

// TODO store this info incrementally instead of reconstructing it every reload
// Calculate the total hours per project per week over time
(function :Map<String,Array<Float>> totalTimes [req]
    (if !req.user
            (new Map)
        (let [projects (get_user_projects req)
                clockEntries (get_user_clockEntries req)
                :Map<String,kiss.List<Float>> m (new Map)
                &mut lastWeek null]
            (doFor =>projectId _ projects
                (dictSet m projectId []))
            (doFor entry clockEntries
                (let [inTime (DateTime.fromTime entry.inTime)
                        outTime (DateTime.fromTime entry.outTime)
                        &mut week (inTime.getWeek)]
                    (unless (= lastWeek week)
                        // This only should happen when rolling over to a new year:
                        (when (= lastWeek null) (set lastWeek (- week 1)))
                        (when (< week lastWeek)
                            (+= week 52))
                        (doFor _ (range (- week lastWeek))
                            (doFor =>projectId _ projects
                                (.push (dictGet m projectId) 0))))
                    (set lastWeek week)
                    (+= (nth (dictGet m entry.projectId) -1) (/ (.getTotalSeconds #{outTime - inTime;}#) 3600))))
            m)))

// Clock out on logout:
(onLogout req
    (withUserProp currentClockEntry req
        (when currentClockEntry
            // Clock out the current entry
            (set currentClockEntry.outTime (.getTime (DateTime.now)))
            (withUserProp clockEntries req
                (clockEntries.push currentClockEntry))
            (set currentClockEntry null))))

(kissExpress app [3000]
    (app.get "/"
        (req_res_next []
            (let [&mut dynamicHtml ""
                    tt (totalTimes req)
                    currentClockEntry (get_user_currentClockEntry req)]
                (cond
                    (req.user
                        (doFor =>uuid name (get_user_projects req)
                            (when (= uuid currentClockEntry?.projectId) (+= dynamicHtml "<strong>Since $(DateTime.fromTime currentClockEntry.inTime) -> "))
                            (let [projectWeekHours (dictGet tt uuid)
                                    projectWeekHoursShort (for hours projectWeekHours (/ (Std.int (* 1000 hours)) 1000))
                                    hoursStr (projectWeekHoursShort.join " / ")]
                                (+= dynamicHtml
                                    "<a href=\"#\" onclick=\"window.location.href = '/clock_entry/${uuid}';\">${name}</a> $hoursStr hours <br/>")
                                (when (= uuid currentClockEntry?.projectId)
                                    (+= dynamicHtml "</strong>")))))
                    (true
                        (+= dynamicHtml "Log in or sign up first!")))
                (res.send "<head><title>${pageName}</title><script>$(scriptContent)</script></head> $(kissExpressHeader req)
                            ${dynamicHtml}
                            <input id=\"projectName\"></input><a href=\"#\" onclick=\"window.location.href = '/new_project/' + document.getElementById('projectName').value;\">new project</a>
                            "))))
    
    (app.param "project_name"
        (req_res_next [project_name]
            (set req.project_name project_name)
            (next)))

    // forgot to fill text box
    (app.get "/new_project/"
        (req_res_next []
            (res.redirect "/")))

    (app.get "/new_project/:project_name"
        (req_res_next []
            (when (StringTools.trim req.project_name)
                (let [projectName req.project_name]
                    (withUserProp projects req
                        (dictSet projects (Uuid.v4) projectName))))
            (res.redirect "/")))

    (app.param "project_id"
        (req_res_next [project_id]
            (set req.project_id project_id)
            (next)))
    
    (app.get "/clock_entry/:project_id"
        (req_res_next []
            (withUserProp currentClockEntry req
                (let [projectId req.project_id
                        currentProjectId currentClockEntry?.projectId]
                    (when currentClockEntry
                        // Clock out the current entry
                        (set currentClockEntry.outTime (.getTime (DateTime.now)))
                        (withUserProp clockEntries req
                            (clockEntries.push currentClockEntry))
                        (set currentClockEntry null))
                    (unless (= projectId currentProjectId)
                        (set currentClockEntry
                            (objectWith [inTime (.getTime (DateTime.now))] projectId)))
                    (res.redirect "/"))))))
